"use strict";(self.webpackChunk_windingtree_videre_sdk_docs=self.webpackChunk_windingtree_videre_sdk_docs||[]).push([[361],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return u}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,y=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(y,o(o({ref:t},l),{},{components:n})):r.createElement(y,o({ref:t},l))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5018:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:5,title:"Storage (Off-chain)"},c=void 0,p={unversionedId:"protocol/storage",id:"protocol/storage",title:"Storage (Off-chain)",description:"Storage System",source:"@site/docs/protocol/storage.md",sourceDirName:"protocol",slug:"/protocol/storage",permalink:"/videre/docs/protocol/storage",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/protocol/storage.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Storage (Off-chain)"},sidebar:"tutorialSidebar",previous:{title:"Messaging (Off-chain)",permalink:"/videre/docs/protocol/messaging"},next:{title:"Execution (On-Chain)",permalink:"/videre/docs/protocol/on-chain"}},l={},d=[{value:"Storage System",id:"storage-system",level:2},{value:"Generic Payloads",id:"generic-payloads",level:2},{value:"Service Provider Info / Items / Terms",id:"service-provider-info--items--terms",level:3},{value:"Stays Payloads",id:"stays-payloads",level:2},{value:"Accommodation Facility",id:"accommodation-facility",level:3},{value:"Item Info",id:"item-info",level:3}],m={toc:d};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"storage-system"},"Storage System"),(0,a.kt)("p",null,"The protocol is designed to be storage system agnostic. For the quick-start and proof-of-concept implementations, the data storge system used is ",(0,a.kt)("a",{parentName:"p",href:"https://ipfs.io"},"IPFS"),". IPFS meets the design requirements of ",(0,a.kt)("em",{parentName:"p"},"decentralised")," and ",(0,a.kt)("em",{parentName:"p"},"data ownership"),". A requirement for pinning nodes in IPFS requires further analysis to make sure that the data remains available for dapp usage."),(0,a.kt)("h2",{id:"generic-payloads"},"Generic Payloads"),(0,a.kt)("h3",{id:"service-provider-info--items--terms"},"Service Provider Info / Items / Terms"),(0,a.kt)("p",null,"The initial design is for service provider data to be stored monolithically, excluding images. The payloads are generic in nature, with payloads designed to be extended by industry-specific implementations."),(0,a.kt)("p",null,"Each payload is placed in a ",(0,a.kt)("inlineCode",{parentName:"p"},"SignedPayloadWrapper"),", with an authorised API signer having signed a hash of the payload which is subsequently placed in ",(0,a.kt)("inlineCode",{parentName:"p"},"SignedPayloadWrapper.signature"),". This provides "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message ServiceItemData {\n  // primitive item.id\n  bytes item = 1;\n  // industry-specific payload describing item\n  bytes payload = 2;\n}\n\nmessage ServiceTermData {\n  // primitive term.id\n  bytes term = 1;\n  // industry-specific payload describing term\n  bytes payload = 2;\n  // smart contract address that implements ITerm interface\n  string implementation = 3;\n}\n\nmessage ServiceProviderData {\n  // primitive serviceProvider.id\n  bytes serviceProvider = 1;\n  // services (items) provided by this service provider\n  repeated ServiceItemData items = 2;\n  // terms that may be applicable to services provided\n  repeated ServiceTermData terms = 3;\n  // industry-specific payload describing service provider\n  bytes payload = 4;\n  // signed hash by ServiceProvider `api` signer\n  bytes signature = 5;\n}\n")),(0,a.kt)("h2",{id:"stays-payloads"},"Stays Payloads"),(0,a.kt)("h3",{id:"accommodation-facility"},"Accommodation Facility"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"// ServiceProviderData.payload\nmessage Facility {\n  // name of facility\n  string name = 1;\n  // description\n  string description = 2;\n  // check-in / check-out times\n  Policies policies = 14;\n  // service provider's URL\n  string website = 5;\n  // location\n  google.type.LatLng location = 6;\n  // photos of the entire facility (not space-specific)\n  repeated videre.type.Photo photos = 7;\n  // connectivity\n  optional Connectivity connectivity = 21;\n}\n")),(0,a.kt)("h3",{id:"item-info"},"Item Info"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"// an item may be something like a space (ie. queen room)\n// or it may be something like 'breakfast'.\nmessage Item {\n  // name of the item. Target <50 chars for English\n  string name = 1;\n  // description\n  string description = 2;\n  // what type of item this is\n  ItemType type = 3;\n  // photos applicable to the item\n  repeated videre.type.Photo photos = 4;\n  // the payload describing the item (line specific)\n  // eg. may be Space message\n  optional bytes payload = 5;\n}\n")))}u.isMDXComponent=!0}}]);